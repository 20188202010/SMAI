1. model name and why that model.
	Neural Networks

2. description 

	we are given n samples

    		X = {x_1, ...., x_n}

	and 5 labels for each category

    		y = {y_1, ..., y_5}

	 
	We use a simple neural network as an example to model the probability P(c_j|x_i) of a class c_i given sample x_i.
        We then estimate out prediction as a vector of 5 classes, representing the probability of that sample to belong to each of the class.
	Then first ranking is given to the class with highest probability, second ranking to the class with second highest probability and so 		on, hence the ranking is done of each given data sample.

	we used sigmoid and binary_crossentropy instead of softmax and categorical_crossentropy beacuse:
	Let the output layer give, [0.2689414213699951,  0.9933071490757153,  0.3775406687981454,  0.9933071490757153,  0.3775406687981454]
		By using softmax, we would clearly pick class 2 and 4. But we have to know how many labels we want for a sample or have to pick a threshold. This is clearly not what we want.

		With the sigmoid activation function at the output layer the neural network models the probability of a class c_j as bernoulli distribution.Now the probabilites of each class is independant from the other class probabilies. So we can use the threshold 0.5 as usual. 

		We use the binary_crossentropy loss and not the usual in multi-class classification used categorical_crossentropy loss,as we want to penalize each output node independantly. So we pick a binary loss and model the output of the network as a independent bernoulli distributions per label.

   	 	
3. challenges
	To determine the number of hidden layers and neurons present in each layer, to get good accuracy.
4. pros
	Accuracy is better than all the other models.
5. cons
	We have to find optimal number of hidden layers otherwise chances of overfitting are there.
	Long training process.

